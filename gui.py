
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
import requests
from threading import Thread
import pyperclip
from keyboard import add_hotkey
import time

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Frame, ttk,Menu, Label,messagebox, filedialog


file_path = None

# Function to check for internet connection 
def internet_connection():
    try:
        # Check if the connection is successful
        requests.get('https://google.com')
        return True
    # If there is a connection error return False
    except requests.ConnectionError:
            return False

def create_dir():
      #Check if path already exists before saving the file 
    if not Path.exists(Path.home() / 'Documents' / 'Scrapped_lyrics'):
        Path.mkdir(Path.home() / 'Documents' / 'Scrapped_lyrics')

window = Tk()



# Function to fetch data in a thread
def fetch_data():
    if not internet_connection():
         messagebox.showwarning(title='Network error',message='LyricsFusion needs a network connection to work')
         feedback_label.config(text='No network connection' ,foreground='red')
         print("LyricsFuion needs a network connection to work")
         return
        
    from scrappers.musicxmatch_scrapper import  scrape_from_musicxmatch
    from scrappers.genius_scrapper import scrape_from_genius
    artist = artist_name.get().strip().lower()
    track = track_name.get().strip().lower()
    translation = lyrics_translation.get().strip().lower()
   
    if not artist:
        feedback_label.config(text='Artist name is required!', foreground='red')
        return
    if not track:
        feedback_label.config(text='Track name is required!', foreground='red')
        return

    feedback_label.config(text=f'Searching lyrics for: {track} by {artist}', foreground='blue')
    submit_btn.config(state='disabled')

    def search():
        try:
            # Simulate a loading animation
            for i in range(3):
                feedback_label.config(text=f"Searching{'.' * (i + 1)}")
                time.sleep(0.5)
                # Scrape from Musicxmatch
                try:
                    musicxmatch_lyrics = scrape_from_musicxmatch(artist_name=artist, track_name=track, lyrics_lang=translation)
                    #Display lyrics to the text area 
                    if  musicxmatch_lyrics['lyrics']:
                        entry_1.delete('1.0', 'end')
                        entry_1.insert('1.0',  musicxmatch_lyrics['lyrics'])
                        feedback_label.config(text='Lyrics found!', foreground='green')
                    else:
                        response = messagebox.askyesno(title="Search lyrics from Genius", message='Lyrics not found on MusicXMatch, Would you like to search lyrics from Genius ?')
                        if response:
                            genius_lyrics = scrape_from_genius(artist,track)
                            if genius_lyrics['lyrics']:
                                 entry_1.delete('1.0', 'end')
                                 entry_1.insert('1.0',  genius_lyrics['lyrics'])
                                 feedback_label.config(text='Lyrics found!', foreground='green')
                            else:
                                feedback_label.config(text='Lyrics not found!', foreground='red') 

                  
                except Exception as e:
                    feedback_label.config(text='Error fetching lyrics!', foreground='red')
                    messagebox.showerror(title='Error', message=f'An error occurred while fetching the lyrics: {e}')
                    return
    
                return              
        finally:
            # Re-enable the submit button
            submit_btn.after(0,submit_btn.config(state='normal'))
    # Start the thread to fetch data from the web in the background without blocking the UI thread 
    thread = Thread(target=search)
    thread.start()


def open_lyrics():
    global file_path
    create_dir()
    file_path = filedialog.askopenfilename(
        filetypes=[('Text Files', '*.txt'), ('All Files', '*.*')],
        title='Open Lyrics File',
        # Set the initial directory to the user's Documents directory "Scrapped_lyrics"
        # Set the path depending on the OS and the user's username
        initialdir=Path.home() / 'Documents' / 'Scrapped_lyrics',
        defaultextension='.txt'
        
        )
    if file_path:
        with open(file_path, 'r') as f:
            lyrics = f.read()
            entry_1.delete('1.0', 'end')
            entry_1.insert('1.0', lyrics)
            feedback_label.config(text='Lyrics loaded successfully!', foreground='green')
    else:
        feedback_label.config(text='No file selected!', foreground='red')


def save_lyrics():
    global file_path
    create_dir()
    lyrics = entry_1.get('1.0', 'end').strip()
    if not lyrics:
        feedback_label.config(text='No lyrics to save!', foreground='red')
        return
    if not file_path:
        try:
            file_path = filedialog.asksaveasfilename(
                filetypes=[('Text Files', '*.txt'), ('All Files', '*.*')],
                title='Save Lyrics',
                initialdir=Path.home() / 'Documents' / 'Scrapped_lyrics',
                defaultextension='.txt'
            )
            with open(file_path, 'w') as f:
                f.write(lyrics)
            feedback_label.config(text='Lyrics saved successfully!', foreground='green')
        except Exception as e:
            feedback_label.config(text='Error saving lyrics!', foreground='red')
            messagebox.showerror(title='Error', message=f'An error occurred while saving the lyrics: {e}')
        return
    

    
    try:
        with open(file_path, 'w') as f:
            f.write(lyrics)
        feedback_label.config(text='Lyrics saved successfully!', foreground='green')
    except Exception as e:
        feedback_label.config(text='Error saving lyrics!', foreground='red')
        messagebox.showerror(title='Error', message=f'An error occurred while saving the lyrics: {e}')


def save_as_lyrics():
    global file
    create_dir()
    lyrics = entry_1.get('1.0', 'end').strip()
    if not lyrics:
        feedback_label.config(text='No lyrics to save!', foreground='red')
        return
    try:
        file = filedialog.asksaveasfilename(
            filetypes=[('Text Files', '*.txt'), ('All Files', '*.*')],
            title='Save Lyrics As',
            
            initialdir=Path.home(),
            defaultextension='.txt'
        )
       
    except Exception as e:
        feedback_label.config(text='Error saving lyrics!', foreground='red')
        messagebox.showerror(title='Error', message=f'An error occurred while saving the lyrics: {e}')

# Function to copy lyrics to clipboard
def copy_to_clipboard():
    lyrics = entry_1.get('1.0', 'end').strip()
    if not lyrics:
        feedback_label.config(text='No lyrics to copy!', foreground='red')
        return
    try:
        pyperclip.copy(lyrics)
        feedback_label.config(text='Lyrics copied to clipboard!', foreground='green')
    except Exception as e:
        feedback_label.config(text='Error copying lyrics!', foreground='red')
        messagebox.showerror(title='Error', message=f'An error occurred while copying the lyrics: {e}')


# Function to close the window
def on_closing():
    if messagebox.askokcancel("Quit", "Do you want to quit?"):
        window.destroy()
    

#Check if user close the window with the 'x' button
window.protocol("WM_DELETE_WINDOW", on_closing)


# Add a hotkey to copy lyrics to clipboard, save, save as and open lyrics, close app, Enter key press to start searching..
add_hotkey('enter', fetch_data)
add_hotkey('ctrl+s', save_lyrics)
add_hotkey('ctrl+shift+s', save_as_lyrics)
add_hotkey('ctrl+o', open_lyrics)
add_hotkey('ctrl+c', copy_to_clipboard)
add_hotkey('ctrl+q', on_closing)




window.geometry("1270x650")
window.title("LyricsFusion")
window.configure(bg = "#E6E6E6")


#Setup menu bar
menubar = Menu(window, bg="#E6E6E6", fg="#000716", font=('Arial', 12))
file = Menu(menubar, tearoff=0, bg="#E6E6E6", fg="#000716", font=('Arial', 12))
file.add_command(label="Open -> ctrl + o", command=open_lyrics)
file.add_command(label="Save -> ctrl + s", command=save_lyrics)
file.add_command(label="Save as... -> ctrl + shift + s", command=save_lyrics)
file.add_separator()
file.add_command(label="Exit -> ctrl + q", command=on_closing)
menubar.add_cascade(label="File", menu=file)

option_menu = Menu(menubar, tearoff=0, bg="#E6E6E6", fg="#000716", font=('Arial', 12))
option_menu.add_command(label="Export to PDF")
option_menu.add_command(label="Copy to clipboard -> ctrl + c",command=copy_to_clipboard)
option_menu.add_command(label="Help")
menubar.add_cascade(label="Options", menu=option_menu)
window.config(menu=menubar)


canvas = Canvas(
    window,
    bg = "#E6E6E6",
    height = 716,
    width = 1296,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)



entry_1 = Text(
    wrap="word",
    undo=True,
    autoseparators=True,
    bd=0,
    padx=4,
    pady=7,
    bg="#DEDEDE",
    fg="#000716",
    font=('Franklin Gothic Medium', 15),
    highlightthickness=0,
)


# Setup scrollbar for the text widget
scrollbar = ttk.Scrollbar(
    window,
    orient='vertical',
    command=entry_1.yview
)   
scrollbar.place(
    x=12.0,
    y=12.0,
    height=600.0
)
entry_1['yscrollcommand'] = scrollbar.set

entry_1.place(
    x=664.0,
    y=12.0,
    width=591.0,
    height=600.0
)

canvas.create_text(
    144.0,
    22.0,
    anchor="nw",
    text="ðŸŽµ LyricsFusion ðŸŽµ",
    fill="#000000",
    font=('Arial Baltic', 25, 'bold')
)


artist_name = Entry(
   bd=0,
    bg="#D9D9D9",
    font=("Arial", 12),
    highlightthickness=2,
    borderwidth=0,
    highlightbackground="#F3F3F3"
)

artist_name.place(
    x=103.0,
    y=165.0,
    width=389.0,
    height=50.0
)


track_name = Entry(
    bd=0,
    bg="#D9D9D9",
    font=("Arial", 12),
    highlightthickness=2,
    borderwidth=0,
    highlightbackground="#F3F3F3"
)
track_name.place(
    x=103.0,
    y=320.0,
    width=389.0,
    height=50.0
)

lyrics_translation = Entry(
    bd=0,
    bg="#D9D9D9",
    font=("Arial", 12),
    highlightthickness=2,
    borderwidth=0,
    highlightbackground="#F3F3F3"
)
lyrics_translation.place(
    x=103.0,
    y=460.0,
    width=389.0,
    height=50.0
)

canvas.create_text(
    103.0,
    114.0,
    anchor="nw",
    text="ðŸŽ¨ Whoâ€™s your favorite artist? \n Type their name below (required) ðŸŽ¶:",  
    font=("Franklin Gothic Medium", 12, "italic"),
    fill="#000000"
    
)

canvas.create_text(
    103.0,
    267.0,
    anchor="nw",
    text="ðŸŽµ What track are you vibinâ€™ to? \n Type the track name (required) ðŸŽ§:",
    fill="#000000",
    font=("Arial", 12, "italic"),
)

canvas.create_text(
    103.0,
    407.0,
    anchor="nw",
    text="ðŸŽµ Ready to vibe? \n Translate lyrics to your favorite language (e.g., Spanish, French, etc.) ðŸŽ¤:",
    fill="#000000",
    font=("Arial", 12, "italic"),
)

feedback_label = Label(
    text="",
    bg="#E6E6E6",
    fg="#000000",
    font=("Arial", 12)
)
feedback_label.place(
    x=103.0,
    y=540.0,
    width=389.0,
    height=30.0
)



submit_btn = Button(
    text='Search Lyrics',
    bg="#000716",
    fg="#FFFFFF",
    font=("Arial", 15),
    borderwidth=0,
    highlightthickness=0,
    command=fetch_data,
    relief="flat",
    cursor="hand2"
)
submit_btn.place(
    x=103.0,
    y=582.0,
    width=380.0,
    height=55.0
)
window.resizable(False, False)
window.mainloop()
