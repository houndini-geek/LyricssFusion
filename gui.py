
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
import requests
from threading import Thread
import time

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Frame, ttk,Menu, Label,messagebox, filedialog



OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\Houndini\Desktop\build\assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

file = None

# Function to check for internet connection 
def internet_connection():
    try:
        # Check if the connection is successful
        requests.get('https://google.com')
        return True
    # If there is a connection error return False
    except requests.ConnectionError:
            return False

def create_dir():
      #Check if path already exists before saving the file 
    if not Path.exists(Path.home() / 'Documents' / 'Scrapped_lyrics'):
        Path.mkdir(Path.home() / 'Documents' / 'Scrapped_lyrics')

window = Tk()



# Function to fetch data in a thread
def fetch_data():
    from scrappers.musicxmatch_scrapper import scrape_lyrics
    artist = artist_name.get().strip().lower()
    track = track_name.get().strip().lower()
    translation = lyrics_translation.get().strip().lower()
   
    if not artist:
        feedback_label.config(text='Artist name is required!', foreground='red')
        return
    if not track:
        feedback_label.config(text='Track name is required!', foreground='red')
        return

    feedback_label.config(text=f'Searching lyrics for: {track} by {artist}', foreground='blue')
    submit_btn.config(state='disabled')

    def search():
        try:
            # Simulate a loading animation
            for i in range(3):
                feedback_label.config(text=f"Searching{'.' * (i + 1)}")
                time.sleep(0.5)
            if internet_connection():
             results =  scrape_lyrics(artist_name=artist, track_name=track, lyrics_lang=translation)
             #Display lyrics to the text area 
             entry_1.delete('1.0', 'end')
             entry_1.insert('1.0', results['lyrics'])
             feedback_label.config(text='Lyrics found!', foreground='green')
             return
            else:
               messagebox.showwarning(title='Network error',message='Lyrics scraper needs a network connection to work')
               feedback_label.config(text='No network connection')
               print("Lyrics scraper needs a network connection to work")
               return
        finally:
            # Re-enable the submit button
            submit_btn.after(0,submit_btn.config(state='normal'))
    # Start the thread to fetch data from the web in the background without blocking the UI thread 
    thread = Thread(target=search)
    thread.start()


def open_lyrics():
    global file
    create_dir()
    file = filedialog.askopenfilename(
        filetypes=[('Text Files', '*.txt'), ('All Files', '*.*')],
        title='Open Lyrics File',
        # Set the initial directory to the user's Documents directory "Scrapped_lyrics"
        # Set the path depending on the OS and the user's username
        initialdir=Path.home() / 'Documents' / 'Scrapped_lyrics',
        defaultextension='.txt'
        
        )
    if file:
        with open(file, 'r') as f:
            lyrics = f.read()
            entry_1.delete('1.0', 'end')
            entry_1.insert('1.0', lyrics)
            feedback_label.config(text='Lyrics loaded successfully!', foreground='green')
    else:
        feedback_label.config(text='No file selected!', foreground='red')


def save_lyrics():
    global file
    create_dir()
    lyrics = entry_1.get('1.0', 'end').strip()
    if not lyrics:
        feedback_label.config(text='No lyrics to save!', foreground='red')
        return
    try:
        if not file:
            file = filedialog.asksaveasfilename(
                filetypes=[('Text Files', '*.txt'), ('All Files', '*.*')],
                title='Save Lyrics As',
                # Set the initial directory to the user's Documents directory "Scrapped_lyrics"
                # Set the path depending on the OS and the user's username
                initialdir=Path.home() / 'Documents' / 'Scrapped_lyrics',
                defaultextension='.txt'
            )
        if file:
            with open(file, 'w') as f:
                f.write(lyrics)
            feedback_label.config(text='Lyrics saved successfully!', foreground='green')
    except Exception as e:
        feedback_label.config(text='Error saving lyrics!', foreground='red')
        messagebox.showerror(title='Error', message=f'An error occurred while saving the lyrics: {e}')


def save_as_lyrics():
    global file
    create_dir()
    lyrics = entry_1.get('1.0', 'end').strip()
    if not lyrics:
        feedback_label.config(text='No lyrics to save!', foreground='red')
        return
    try:
        file = filedialog.asksaveasfilename(
            filetypes=[('Text Files', '*.txt'), ('All Files', '*.*')],
            title='Save Lyrics As',
            
            initialdir=Path.home(),
            defaultextension='.txt'
        )
       
    except Exception as e:
        feedback_label.config(text='Error saving lyrics!', foreground='red')
        messagebox.showerror(title='Error', message=f'An error occurred while saving the lyrics: {e}')

# Function to close the window
def on_closing():
    if messagebox.askokcancel("Quit", "Do you want to quit?"):
        window.destroy()
    

#Check if user close the window with the 'x' button
window.protocol("WM_DELETE_WINDOW", on_closing)



window.geometry("1296x716")
window.title("LyricsFusion")
window.configure(bg = "#E6E6E6")


#Setup menu bar
menubar = Menu(window)
file = Menu(menubar, tearoff=0)
file.add_command(label="Open", command=open_lyrics)
file.add_command(label="Save", command=save_lyrics)
file.add_command(label="Save as...", command=save_lyrics)
file.add_separator()
file.add_command(label="Exit", command=on_closing)
menubar.add_cascade(label="File", menu=file)

window.config(menu=menubar)


canvas = Canvas(
    window,
    bg = "#E6E6E6",
    height = 716,
    width = 1296,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    959.5,
    358.0,
    image=entry_image_1
)



entry_1 = Text(
    wrap="word",
    undo=True,
    autoseparators=True,
    bd=0,
    padx=4,
    pady=7,
    bg="#DEDEDE",
    fg="#000716",
    font=('Franklin Gothic Medium', 12),
    highlightthickness=0,
)


# Setup scrollbar for the text widget
scrollbar = ttk.Scrollbar(
    window,
    orient='vertical',
    command=entry_1.yview
)   
scrollbar.place(
    x=12.0,
    y=12.0,
    height=690.0
)
entry_1['yscrollcommand'] = scrollbar.set

entry_1.place(
    x=664.0,
    y=12.0,
    width=591.0,
    height=690.0
)

canvas.create_text(
    144.0,
    22.0,
    anchor="nw",
    text="ðŸŽµ LyricsFusion ðŸŽµ",
    fill="#000000",
    font=('Arial Baltic', 25, 'bold')
)


artist_name = Entry(
   bd=0,
    bg="#D9D9D9",
    font=("Arial", 12),
    highlightthickness=2,
    borderwidth=0,
    highlightbackground="#F3F3F3"
)

artist_name.place(
    x=103.0,
    y=165.0,
    width=389.0,
    height=50.0
)


track_name = Entry(
    bd=0,
    bg="#D9D9D9",
    font=("Arial", 12),
    highlightthickness=2,
    borderwidth=0,
    highlightbackground="#F3F3F3"
)
track_name.place(
    x=103.0,
    y=320.0,
    width=389.0,
    height=50.0
)

lyrics_translation = Entry(
    bd=0,
    bg="#D9D9D9",
    font=("Arial", 12),
    highlightthickness=2,
    borderwidth=0,
    highlightbackground="#F3F3F3"
)
lyrics_translation.place(
    x=103.0,
    y=460.0,
    width=389.0,
    height=50.0
)

canvas.create_text(
    103.0,
    114.0,
    anchor="nw",
    text="ðŸŽ¨ Whoâ€™s your favorite artist? \n Type their name below (required) ðŸŽ¶:",  
    font=("Franklin Gothic Medium", 12, "italic"),
    fill="#000000"
    
)

canvas.create_text(
    103.0,
    267.0,
    anchor="nw",
    text="ðŸŽµ What track are you vibinâ€™ to? \n Type the track name (required) ðŸŽ§:",
    fill="#000000",
    font=("Arial", 12, "italic"),
)

canvas.create_text(
    103.0,
    407.0,
    anchor="nw",
    text="ðŸŽµ Ready to vibe? \n Translate lyrics to your favorite language (e.g., Spanish, French, etc.) ðŸŽ¤:",
    fill="#000000",
    font=("Arial", 12, "italic"),
)

feedback_label = Label(
    text="",
    bg="#E6E6E6",
    fg="#000000",
    font=("Arial", 12)
)
feedback_label.place(
    x=103.0,
    y=540.0,
    width=389.0,
    height=30.0
)


button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))

submit_btn = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=fetch_data,
    relief="flat",
    cursor="hand2"
)
submit_btn.place(
    x=103.0,
    y=582.0,
    width=380.0,
    height=55.0
)
window.resizable(False, False)
window.mainloop()
